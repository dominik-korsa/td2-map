use glam::{Mat3, Vec2};
use nalgebra::{Matrix2, SVD};

// Generated by DeepSeek
pub(crate) fn get_projected_ellipse_axes(radius: f32, rotation: Mat3) -> (Vec2, Vec2) {
    let rotation_xz_components = Matrix2::new(
        rotation.x_axis.x, rotation.z_axis.x,
        rotation.x_axis.z, rotation.z_axis.z,
    );

    // Compute SVD (U contains left singular vectors, S singular values)
    let svd = SVD::new(rotation_xz_components, true, true);
    let u = svd.u.expect("U matrix should be computed");
    let s = svd.singular_values;

    let major_axis = u.column(0).into_owned() * s[0] * radius;
    let minor_axis = u.column(1).into_owned() * s[1] * radius;

    (Vec2::new(major_axis.x, major_axis.y), Vec2::new(minor_axis.x, minor_axis.y))
}
